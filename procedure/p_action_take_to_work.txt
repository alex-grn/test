CREATE OR REPLACE FUNCTION public.p_action_take_to_work (
  idlist text,
  uid bigint,
  destination text
)
RETURNS void AS
$body$
declare 
  nUID bigint:=uid;
  rec  record;
  nID  bigint;
  sTYPEPAYDOC text;
begin
 if destination = '0' then
  for rec in (
      select nUID,
           s.STATEMENTADBID,
           s.ID,
           s.KOD_DOC_ADB,
           s.KOD_DOC,
           s.OWNERID
      from STATEMENTADBDONE s
	 where s.id = any(P_SYSTEM_GET_SELECTLIST(IDLIST))
  )
  loop
     --определим тип
     if rec.KOD_DOC_ADB ilike '%ZV%' THEN
        sTYPEPAYDOC:='4';
     elsif rec.KOD_DOC_ADB ilike '%UF%' or rec.KOD_DOC_ADB ilike '%UN%' or rec.KOD_DOC_ADB ilike '%UM%' THEN
        sTYPEPAYDOC:='3';   
     elsif nullif(rec.KOD_DOC_ADB,'') is null then 
        if rec.KOD_DOC ilike '%PP%' THEN
           sTYPEPAYDOC:='0';
        elsif rec.KOD_DOC ilike '%UF%' or rec.KOD_DOC ilike '%UN%' THEN 
           sTYPEPAYDOC:='3';
        end if;
     end if;
     insert into INFOPAYDOC(uid, statementadbid, statementadbdoneid, sign_fait, typepaydoc, ownerid)
     values(nUID, rec.STATEMENTADBID, rec.ID, 0, sTYPEPAYDOC, rec.OWNERID) returning INFOPAYDOC.ID into nID;
     perform p_system_doclinks_add('STATEMENTADBDONE'::text,rec.ID,'INFOPAYDOC'::text,nID,current_date);
     update STATEMENTADBDONE s set statusdoc = '1' where s.id = rec.id;
  end loop;
  
 end if; 
  
  
end;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

ALTER FUNCTION public.p_action_take_to_work (idlist text, uid bigint, destination text)
  OWNER TO postgres;
CREATE OR REPLACE FUNCTION public.p_action_sheets_to_transactionlog (
  id bigint,
  uid bigint,
  unit bigint,
  docdate date,
  doctypeid bigint,
  typicalopersid bigint
)
RETURNS text AS
$body$
declare 
   nID  bigint:=ID;
   nUID bigint:=UID;
   rec  record;
   sp   record;
   dDOCDATE date:=DOCDATE;
   nDOCTYPEID bigint:=DOCTYPEID;
   nTYPICALOPERSID bigint:=TYPICALOPERSID;
   nTRANSACTIONLOGID bigint;
   nTRANSACTIONLOG_DOCSID bigint;
   nTRANSACTIONLOG_STAGESID bigint;
   nJURPERSONSID bigint;
   next_num text;
   fl       boolean;
   --определим уровни доступа
   nLID_TRANSACTIONLOG        bigint:=P_SYSTEM_GEN_LID('TRANSACTIONLOG',nUID,UNIT);
   nLID_TRANSACTIONLOG_DOCS   bigint:=P_SYSTEM_GEN_LID('TRANSACTIONLOG_DOCS',nUID,UNIT);
   nLID_TRANSACTIONLOG_STAGES bigint:=P_SYSTEM_GEN_LID('TRANSACTIONLOG_STAGES',nUID,UNIT);
begin
    for rec in 
        select p.id as SHEETSID,
               p.DOCDATE,
               p.DOCTYPEID,
               p.DOCNUMB,
               sum(COALESCE(ps.sumcomp,0))+sum(COALESCE(ps.sumextra12,0))+sum(COALESCE(ps.extraa,0)) as SUMM,
               p.TYPEEXPID,
               e.BUDGCLASSID,
               p.ELECTCAMPAIGNID,
               p.ELECTCOMMINCAMPID
          from SHEETS p,
               SHEETDETAILS ps,
               ELECTCAMPAIGN e
         where p.id = nID 
           and ps.SHEETSID = p.ID
           and e.ID = p.ELECTCAMPAIGNID
      group by p.id, p.DOCDATE, p.DOCTYPEID, p.DOCNUMB, p.TYPEEXPID, e.BUDGCLASSID, p.ELECTCAMPAIGNID, p.ELECTCOMMINCAMPID
    LOOP
       select j.ID
         INTO nJURPERSONSID
         from ELECTCOMMINCAMP e
        inner join ELECTCOMMITTEE k on k.ID = e.ELECTCOMMITTEEID
         left join ELECTCOMMITTEE ks on ks.IDGASECOM = k.IDGASPARECOM and k.LEVELELCOMMITTEE ~~* 'district'
        inner join JURPERSONS j on j.ELECTCOMMITTEEID = COALESCE(ks.id,k.id)
        where e.ID = rec.ELECTCOMMINCAMPID;
       fl:=false;
       update SHEETS p set status = '2' where p.ID = rec.SHEETSID;
      --найдем заголовок, если нет его, то добавим
       BEGIN
         select t.ID 
           into STRICT nTRANSACTIONLOGID
           from TRANSACTIONLOG t 
          where t.ELECTCAMPAIGNID = rec.ELECTCAMPAIGNID 
            and t.JURPERSONSID = nJURPERSONSID;
       exception when no_data_found THEN 
          insert into transactionlog(uid,lid,electcampaignid,jurpersonsid)
                              values(nUID,nLID_TRANSACTIONLOG,rec.ELECTCAMPAIGNID,rec.JURPERSONSID) returning TRANSACTIONLOG.ID into nTRANSACTIONLOGID;
       end;
       
       --сгенерируем следующий номер
       select coalesce(regexp_replace(max(lpad(TRANSACTIONNUMB::text,80,' ')), '[^0-9]', '', 'g')::int+1,1) into next_num from TRANSACTIONLOG_DOCS where TRANSACTIONLOGID = nTRANSACTIONLOGID;
       
       --создаем запись в журнале операций
       insert into TRANSACTIONLOG_DOCS(uid,lid,transactionlogid,transactionnumb,transactiondate,doctypeid,docnumb,docdate,docsum,typicalopersid)
       values(nUID,nLID_TRANSACTIONLOG_DOCS,nTRANSACTIONLOGID,COALESCE(next_num,'1'),dDOCDATE,rec.DOCTYPEID,rec.DOCNUMB,rec.DOCDATE,rec.SUMM,nTYPICALOPERSID) 
       returning TRANSACTIONLOG_DOCS.ID into nTRANSACTIONLOG_DOCSID;
       
       
       for sp in (
           select case when t.ACCOUNTDTID is null and t.typetos = '0' then null else COALESCE(t.DTBUDGCLASSID,rec.BUDGCLASSID) end as DTBUDGCLASSID,
                  case when t.ACCOUNTKTID is null and t.typetos = '0' then null else COALESCE(t.KTBUDGCLASSID,rec.BUDGCLASSID) end as KTBUDGCLASSID,
                  case when t.ACCOUNTKTID is null and t.typetos = '0' then null else COALESCE(k.DTECONCLASSID,t.ECONCLASSKTID) end as ECONCLASSKTID,
                  case when t.ACCOUNTDTID is null and t.typetos = '0' then null else COALESCE(d.KTECONCLASSID,t.ECONCLASSDTID) end as ECONCLASSDTID,
                  case when t.ACCOUNTDTID is null and t.typetos = '0' then null else rec.TYPEEXPID end as DTYPEEXPID,
                  case when t.ACCOUNTKTID is null and t.typetos = '0' then null else rec.TYPEEXPID end as KTYPEEXPID,
                  case when t.ACCOUNTDTID is null and t.typetos = '0' then null else t.ACCOUNTDTID end as ACCOUNTDTID,
                  case when t.ACCOUNTDTID is null and t.typetos = '0' then null else 1 end as dKFO,
                  case when t.ACCOUNTKTID is null and t.typetos = '0' then null else 1 end as kKFO,
                  case when t.ACCOUNTKTID is null and t.typetos = '0' then null else t.ACCOUNTKTID end as ACCOUNTKTID,
                  COALESCE(p.sumcomp,0)+COALESCE(p.sumextra12,0)+COALESCE(p.extraa,0) as summ,
                  p.ID,
                  t.MEMORDERID
             from SHEETDETAILS p 
             left join TYPICALOPERSPEC t on t.TYPICALOPERSID = nTYPICALOPERSID
             left join DICACCS d on d.ID = t.ACCOUNTDTID 
             left join DICACCS k on k.ID = t.ACCOUNTKTID
            where p.SHEETSID = nID
       )
       LOOP
           insert into TRANSACTIONLOG_STAGES(uid,lid,transactionlog_docsid,dtfinsecurity,dtbudgclassid,dteconclassktid,dttypeexpid,accountdtid,ktfinsecurity,ktbudgclassid,kteconclassktid,kttypeexpid,accountktid,summ,memorderid)
             values(nUID,nLID_TRANSACTIONLOG_STAGES,nTRANSACTIONLOG_DOCSID,sp.dKFO,sp.DTBUDGCLASSID,sp.ECONCLASSDTID,sp.DTYPEEXPID,sp.ACCOUNTDTID,sp.kKFO,sp.KTBUDGCLASSID,sp.ECONCLASSKTID,sp.KTYPEEXPID,sp.ACCOUNTKTID,sp.SUMM,sp.memorderid)
           returning TRANSACTIONLOG_STAGES.ID into nTRANSACTIONLOG_STAGESID;
           perform p_system_doclinks_add('SHEETDETAILS',sp.ID,'TRANSACTIONLOG_STAGES',nTRANSACTIONLOG_STAGESID);
           
       end loop; 
       
    END LOOP; 
    return 'Документ проведён в учёте';  
end;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

ALTER FUNCTION public.p_action_sheets_to_transactionlog (id bigint, uid bigint, unit bigint, docdate date, doctypeid bigint, typicalopersid bigint)
  OWNER TO magicbox;